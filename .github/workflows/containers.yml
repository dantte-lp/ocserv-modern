name: Container Build and Test

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'deploy/podman/**'
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/containers.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'deploy/podman/**'
      - 'src/**'
      - 'tests/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  verify-setup:
    name: Verify Podman Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and tools
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah skopeo

      - name: Display versions
        run: |
          podman --version
          buildah --version
          skopeo --version

      - name: Verify rootless support
        run: |
          cd deploy/podman
          ./scripts/verify-rootless.sh || true

  build-dev:
    name: Build Development Image
    runs-on: ubuntu-latest
    needs: verify-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah

      - name: Set up build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/containers
          key: ${{ runner.os }}-podman-dev-${{ hashFiles('deploy/podman/scripts/build-dev.sh') }}
          restore-keys: |
            ${{ runner.os }}-podman-dev-

      - name: Build development image
        run: |
          cd deploy/podman
          chmod +x scripts/build-dev.sh
          ./scripts/build-dev.sh

      - name: Verify image
        run: |
          podman images | grep ocserv-modern-dev
          podman inspect localhost/ocserv-modern-dev:latest

      - name: Test container startup
        run: |
          podman run --rm localhost/ocserv-modern-dev:latest echo "Container started successfully"

      - name: Save image
        run: |
          mkdir -p /tmp/images
          podman save -o /tmp/images/dev-image.tar localhost/ocserv-modern-dev:latest

      - name: Upload image artifact
        uses: actions/upload-artifact@v3
        with:
          name: dev-image
          path: /tmp/images/dev-image.tar
          retention-days: 1

  build-test:
    name: Build Test Image
    runs-on: ubuntu-latest
    needs: build-dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah

      - name: Download dev image
        uses: actions/download-artifact@v3
        with:
          name: dev-image
          path: /tmp/images

      - name: Load dev image
        run: |
          podman load -i /tmp/images/dev-image.tar

      - name: Build test image
        run: |
          cd deploy/podman
          chmod +x scripts/build-test.sh
          ./scripts/build-test.sh

      - name: Save test image
        run: |
          podman save -o /tmp/images/test-image.tar localhost/ocserv-modern-test:latest

      - name: Upload test image artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-image
          path: /tmp/images/test-image.tar
          retention-days: 1

  build-build:
    name: Build Build Image
    runs-on: ubuntu-latest
    needs: verify-setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah

      - name: Build build image
        run: |
          cd deploy/podman
          chmod +x scripts/build-build.sh
          ./scripts/build-build.sh

      - name: Save build image
        run: |
          mkdir -p /tmp/images
          podman save -o /tmp/images/build-image.tar localhost/ocserv-modern-build:latest

      - name: Upload build image artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-image
          path: /tmp/images/build-image.tar
          retention-days: 1

  build-ci:
    name: Build CI Image
    runs-on: ubuntu-latest
    needs: build-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and Buildah
        run: |
          sudo apt-get update
          sudo apt-get install -y podman buildah

      - name: Download build image
        uses: actions/download-artifact@v3
        with:
          name: build-image
          path: /tmp/images

      - name: Load build image
        run: |
          podman load -i /tmp/images/build-image.tar

      - name: Build CI image
        run: |
          cd deploy/podman
          chmod +x scripts/build-ci.sh
          ./scripts/build-ci.sh

      - name: Save CI image
        run: |
          mkdir -p /tmp/images
          podman save -o /tmp/images/ci-image.tar localhost/ocserv-modern-ci:latest

      - name: Upload CI image artifact
        uses: actions/upload-artifact@v3
        with:
          name: ci-image
          path: /tmp/images/ci-image.tar
          retention-days: 1

  quick-validate:
    name: Quick Validation
    runs-on: ubuntu-latest
    needs: build-ci
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Download CI image
        uses: actions/download-artifact@v3
        with:
          name: ci-image
          path: /tmp/images

      - name: Load CI image
        run: |
          podman load -i /tmp/images/ci-image.tar

      - name: Run quick validation
        run: |
          podman run --rm \
            -v ${{ github.workspace }}:/workspace:Z \
            localhost/ocserv-modern-ci:latest \
            /usr/local/bin/quick-validate

  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Download test image
        uses: actions/download-artifact@v3
        with:
          name: test-image
          path: /tmp/images

      - name: Load test image
        run: |
          podman load -i /tmp/images/test-image.tar

      - name: Run tests
        run: |
          podman run --rm \
            -v ${{ github.workspace }}:/workspace:Z \
            localhost/ocserv-modern-test:latest \
            /usr/local/bin/run-tests

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: test-results/
          retention-days: 7

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: coverage-reports/
          retention-days: 7

  push-images:
    name: Push Images to Registry
    runs-on: ubuntu-latest
    needs: [build-dev, build-test, build-build, build-ci, run-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman and Skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y podman skopeo

      - name: Download all images
        uses: actions/download-artifact@v3
        with:
          path: /tmp/images

      - name: Load all images
        run: |
          podman load -i /tmp/images/dev-image/dev-image.tar
          podman load -i /tmp/images/test-image/test-image.tar
          podman load -i /tmp/images/build-image/build-image.tar
          podman load -i /tmp/images/ci-image/ci-image.tar

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push development image
        run: |
          podman tag localhost/ocserv-modern-dev:latest ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dev:latest
          podman tag localhost/ocserv-modern-dev:latest ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dev:${{ github.sha }}
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dev:latest
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-dev:${{ github.sha }}

      - name: Push test image
        run: |
          podman tag localhost/ocserv-modern-test:latest ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-test:latest
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-test:latest

      - name: Push build image
        run: |
          podman tag localhost/ocserv-modern-build:latest ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-build:latest
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-build:latest

      - name: Push CI image
        run: |
          podman tag localhost/ocserv-modern-ci:latest ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ci:latest
          podman push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-ci:latest

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Download dev image
        uses: actions/download-artifact@v3
        with:
          name: dev-image
          path: /tmp/images

      - name: Load dev image
        run: |
          podman load -i /tmp/images/dev-image.tar

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: localhost/ocserv-modern-dev:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
