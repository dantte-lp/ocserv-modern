FROM oraclelinux:10

LABEL maintainer="ocserv-modern development team"
LABEL description="Development environment for ocserv-modern with wolfSSL and modern C libraries"

# Build arguments for tool versions
ARG CMAKE_VERSION=4.1.2
ARG DOXYGEN_VERSION=1.15.0
ARG UNITY_VERSION=2.6.1
ARG CMOCK_VERSION=2.6.0
ARG CEEDLING_VERSION=1.0.1
ARG WOLFSSL_VERSION=5.8.2
ARG LIBUV_VERSION=1.51.0

# Install base development tools
RUN dnf install -y \
    gcc \
    gcc-c++ \
    make \
    autoconf \
    automake \
    libtool \
    pkgconfig \
    git \
    vim \
    gdb \
    valgrind \
    strace \
    wget \
    curl \
    tar \
    xz \
    bzip2 \
    patch \
    && dnf clean all

# Install dependencies (only available packages in OL10)
RUN dnf install -y \
    pam-devel \
    libseccomp-devel \
    readline-devel \
    lz4-devel \
    libnl3-devel \
    krb5-devel \
    json-c-devel \
    gnutls-devel \
    nettle-devel \
    gmp-devel \
    libtasn1-devel \
    p11-kit-devel \
    && dnf clean all

# Install code quality and documentation tools
RUN dnf install -y \
    clang-tools-extra \
    graphviz \
    python3 \
    python3-pip \
    ruby \
    ruby-devel \
    rubygems \
    && dnf clean all

# Build and install cppcheck from source (not available in OL10 repos)
RUN cd /tmp && \
    git clone --depth 1 --branch 2.18.3 https://github.com/danmar/cppcheck.git && \
    cd cppcheck && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && rm -rf cppcheck

# Install Ruby gems for Ceedling
RUN gem install --no-document \
    rake \
    thor \
    constructor \
    deep_merge

# Build and install CMake 4.1.2 from source
RUN cd /tmp && \
    wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}.tar.gz && \
    tar xzf cmake-${CMAKE_VERSION}.tar.gz && \
    cd cmake-${CMAKE_VERSION} && \
    ./bootstrap --prefix=/usr/local --parallel=$(nproc) && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && rm -rf cmake-*

# Build and install Doxygen 1.15.0 from source
RUN cd /tmp && \
    wget https://github.com/doxygen/doxygen/archive/refs/tags/Release_${DOXYGEN_VERSION//./_}.tar.gz && \
    tar xzf Release_${DOXYGEN_VERSION//./_}.tar.gz && \
    cd doxygen-Release_${DOXYGEN_VERSION//./_} && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && rm -rf doxygen-* Release_*

# Install Unity testing framework v2.6.1
RUN cd /tmp && \
    wget https://github.com/ThrowTheSwitch/Unity/archive/refs/tags/v${UNITY_VERSION}.tar.gz && \
    tar xzf v${UNITY_VERSION}.tar.gz && \
    cd Unity-${UNITY_VERSION} && \
    mkdir -p /usr/local/include/unity && \
    mkdir -p /usr/local/src/unity && \
    cp src/unity.h src/unity_internals.h /usr/local/include/unity/ && \
    cp src/unity.c /usr/local/src/unity/ && \
    cp -r extras /usr/local/src/unity/ && \
    cd /tmp && rm -rf Unity-* v${UNITY_VERSION}.tar.gz

# Install CMock v2.6.0
RUN cd /tmp && \
    wget https://github.com/ThrowTheSwitch/CMock/archive/refs/tags/v${CMOCK_VERSION}.tar.gz && \
    tar xzf v${CMOCK_VERSION}.tar.gz && \
    cd CMock-${CMOCK_VERSION} && \
    mkdir -p /usr/local/lib/cmock /usr/local/src/cmock && \
    cp -r lib/* /usr/local/lib/cmock/ && \
    cp -r src/* /usr/local/src/cmock/ && \
    cd /tmp && rm -rf CMock-* v${CMOCK_VERSION}.tar.gz

# Install Ceedling v1.0.1
RUN gem install --no-document ceedling -v ${CEEDLING_VERSION}

# Install vcpkg package manager
RUN cd /opt && \
    git clone --depth 1 https://github.com/microsoft/vcpkg.git && \
    cd vcpkg && \
    ./bootstrap-vcpkg.sh && \
    ln -s /opt/vcpkg/vcpkg /usr/local/bin/vcpkg

# Build and install wolfSSL from source (GPLv3!)
# NOTE: --disable-sp-asm due to GCC 14 register syntax incompatibility
# This trades ~5-10% performance for compatibility with modern GCC
RUN cd /tmp && \
    wget https://github.com/wolfSSL/wolfssl/archive/refs/tags/v${WOLFSSL_VERSION}-stable.tar.gz && \
    tar xzf v${WOLFSSL_VERSION}-stable.tar.gz && \
    cd wolfssl-${WOLFSSL_VERSION}-stable && \
    ./autogen.sh && \
    ./configure \
        --enable-tls13 \
        --enable-dtls \
        --enable-dtls13 \
        --enable-session-ticket \
        --enable-alpn \
        --enable-sni \
        --enable-secure-renegotiation \
        --enable-extended-master \
        --enable-ocsp \
        --enable-crl \
        --enable-aesni \
        --enable-intelasm \
        --disable-oldtls \
        --enable-harden \
        --enable-sp \
        --disable-sp-asm \
        --enable-opensslextra \
        --enable-opensslall \
        --enable-curve25519 \
        --enable-ed25519 \
        --enable-sha3 \
        --enable-shake256 \
        --enable-postauth \
        --enable-hrrcookie \
        --enable-quic \
        --prefix=/usr/local \
        CFLAGS="-std=gnu11 -O2 -g -fstack-protector-strong" \
        LDFLAGS="-Wl,-z,relro -Wl,-z,now" && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd /tmp && rm -rf wolfssl-*

# Build and install libuv from source (updated to latest stable)
RUN cd /tmp && \
    wget https://github.com/libuv/libuv/archive/v${LIBUV_VERSION}.tar.gz && \
    tar xzf v${LIBUV_VERSION}.tar.gz && \
    cd libuv-${LIBUV_VERSION} && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DBUILD_TESTING=OFF && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && rm -rf /tmp/libuv-*

# Install cJSON (updated to latest stable)
RUN cd /tmp && \
    git clone --depth 1 --branch v1.7.19 https://github.com/DaveGamble/cJSON.git && \
    cd cJSON && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DENABLE_CJSON_TEST=OFF && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && rm -rf /tmp/cJSON

# Install mimalloc (updated to latest stable v3.x with breaking changes)
RUN cd /tmp && \
    git clone --depth 1 --branch v3.1.5 https://github.com/microsoft/mimalloc.git && \
    cd mimalloc && \
    mkdir build && cd build && \
    cmake .. \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        -DMI_BUILD_TESTS=OFF && \
    make -j$(nproc) && \
    make install && \
    ldconfig && \
    cd / && rm -rf /tmp/mimalloc

# Install linenoise (header-only, just copy files)
RUN cd /tmp && \
    git clone --depth 1 https://github.com/antirez/linenoise.git && \
    cp linenoise/linenoise.h /usr/local/include/ && \
    cp linenoise/linenoise.c /usr/local/src/ && \
    rm -rf /tmp/linenoise

# Create workspace directory
RUN mkdir -p /workspace

WORKDIR /workspace

CMD ["/bin/bash"]
